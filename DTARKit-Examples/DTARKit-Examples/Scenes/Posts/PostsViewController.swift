//
//  PostsViewController.swift
//  DTARKit-Examples
//
//  Created by Dima Tsurkan on 8/25/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IGListKit

protocol PostsDisplayLogic: class {
    func displayFetchedPosts(viewModel: Posts.FetchPosts.ViewModel)
}

class PostsViewController: UIViewController, PostsDisplayLogic {
    var interactor: PostsBusinessLogic?
    var router: (NSObjectProtocol & PostsRoutingLogic & PostsDataPassing)?
    
    var displayedPosts: [Posts.FetchPosts.ViewModel.DisplayedPost] = []
    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())
    
    lazy var adapter: ListAdapter = {
        return ListAdapter(updater: ListAdapterUpdater(), viewController: self, workingRangeSize: 2)
    }()

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = PostsInteractor()
        let presenter = PostsPresenter()
        let router = PostsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configureCollectionView()
        configureNavigationBar()
        fetchPostsOnLoad()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        fetchPostsOnLoad()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionView.frame = view.bounds
    }
  
    // MARK: Fetch posts
  
    func fetchPostsOnLoad() {
        let request = Posts.FetchPosts.Request()
        interactor?.fetchPosts(request: request)
    }
    
    func displayFetchedPosts(viewModel: Posts.FetchPosts.ViewModel) {
        displayedPosts = viewModel.displayedPosts
        adapter.performUpdates(animated: true, completion: nil)
    }
    
    // MARK: - Internal
    
    private func configureCollectionView() {
        collectionView.backgroundColor = .white
        view.addSubview(collectionView)
        adapter.collectionView = collectionView
        adapter.dataSource = self
    }
    
    private func configureNavigationBar() {
        navigationItem.title = "Posts"
    }
  
}

// MARK: - ListAdapterDataSource, ListSingleSectionControllerDelegate

extension PostsViewController: ListAdapterDataSource, ListSingleSectionControllerDelegate {
    
    func objects(for listAdapter: ListAdapter) -> [ListDiffable] {
        return displayedPosts
    }
    
    func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -> ListSectionController {
        return PostSectionController()
    }
    
    func emptyView(for listAdapter: ListAdapter) -> UIView? { return nil }
    
    func didSelect(_ sectionController: ListSingleSectionController, with object: Any) {
        
    }
    
}
