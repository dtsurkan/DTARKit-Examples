//
//  TumblrViewController.swift
//  DTARKit-Examples
//
//  Created by Dima Tsurkan on 9/12/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IGListKit

protocol TumblrDisplayLogic: class {
    func displayFetchedPosts(viewModel: Tumblr.FetchImages.ViewModel)
}

class TumblrViewController: UIViewController, TumblrDisplayLogic {
    var interactor: TumblrBusinessLogic?
    var router: (NSObjectProtocol & TumblrRoutingLogic & TumblrDataPassing)?
    lazy var adapter: ListAdapter = {
        return ListAdapter(updater: ListAdapterUpdater(), viewController: self)
    }()
    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())
    var displayedPhotos: [Tumblr.FetchImages.ViewModel.DisplayedPhoto] = []
    
    var searching = true
    var searchString = ""


    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = TumblrInteractor()
        let presenter = TumblrPresenter()
        let router = TumblrRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionView.frame = view.bounds
    }
  
    // MARK: Fetch Posts
  
    func fetchPosts(text: String) {
        let request = Tumblr.FetchImages.Request(text: text)
        interactor?.fetchPosts(request: request)
    }
  
    func displayFetchedPosts(viewModel: Tumblr.FetchImages.ViewModel) {
        searching = false
        displayedPhotos = viewModel.displayedPhotos
        
        DispatchQueue.main.async {
            self.adapter.performUpdates(animated: true)
        }
    }
    
    // MARK: - Internal
    
    private func configureView() {
        configureCollectionView()
        configureNavigationBar()
    }
    
    private func configureCollectionView() {
        collectionView.backgroundColor = .white
        view.addSubview(collectionView)
        adapter.collectionView = collectionView
        adapter.dataSource = self
    }
    
    func configureNavigationBar() {
        navigationItem.title = "Ciklum"
    }
}

// MARK: - ListAdapterDataSource
extension TumblrViewController: ListAdapterDataSource {
    
    
    func objects(for listAdapter: ListAdapter) -> [ListDiffable] {
        var objects = displayedPhotos as [ListDiffable]
        
        if searching {
            objects.append(searchString as ListDiffable)
        }
        return objects
    }
    
    func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -> ListSectionController {
        if let obj = object as? String, obj == searchString {
            let sectionController = SearchSectionController()
            sectionController.delegate = self
            return sectionController
        } else {
            return TumblrSectionController()
        }
    }
    
    func emptyView(for listAdapter: ListAdapter) -> UIView? { return nil }

}

// MARK: - SearchSectionControllerDelegate
extension TumblrViewController: SearchSectionControllerDelegate {
    
    func searchSectionController(_ sectionController: SearchSectionController, didChangeText text: String) {
        searchString = text
        fetchPosts(text: text)
    }
    
}
