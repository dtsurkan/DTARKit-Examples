//
//  ListExamplesViewController.swift
//  DTARKit-Examples
//
//  Created by Dima Tsurkan on 8/25/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IGListKit

protocol ListExamplesDisplayLogic: class {
    func displayFetchedExamples(viewModel: ListExamples.FetchExamples.ViewModel)
}

class ListExamplesViewController: UIViewController, ListExamplesDisplayLogic {
    
    var interactor: ListExamplesBusinessLogic?
    var router: (NSObjectProtocol & ListExamplesRoutingLogic & ListExamplesDataPassing)?
    var displayedExamples: [ListExamples.FetchExamples.ViewModel.DisplayedExample] = []
    
    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())
    
    lazy var adapter: ListAdapter = {
        return ListAdapter(updater: ListAdapterUpdater(), viewController: self)
    }()

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = ListExamplesInteractor()
        let presenter = ListExamplesPresenter()
        let router = ListExamplesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configureCollectionView()
        configureNavigationBar()
        fetchExamplesOnLoad()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        fetchExamplesOnLoad()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionView.frame = view.bounds
    }
  
    // MARK: - Fetch orders
    
    func fetchExamplesOnLoad() {
        let request = ListExamples.FetchExamples.Request()
        interactor?.fetchExamples(request: request)
    }
    
    func displayFetchedExamples(viewModel: ListExamples.FetchExamples.ViewModel) {
        displayedExamples = viewModel.displayedExamples
        adapter.performUpdates(animated: true, completion: nil)
    }
    
  
    func configureCollectionView() {
        collectionView.backgroundColor = .white
        view.addSubview(collectionView)
        adapter.collectionView = collectionView
        adapter.dataSource = self
    }
    
    func configureNavigationBar() {
        navigationItem.title = "Examples"
    }
  
    
}

// MARK: - ListAdapterDataSource, ListSingleSectionControllerDelegate

extension ListExamplesViewController: ListAdapterDataSource, ListSingleSectionControllerDelegate {
    
    func objects(for listAdapter: ListAdapter) -> [ListDiffable] {
        return displayedExamples
    }
    
    func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -> ListSectionController {
        let configureBlock = { (item: Any, cell: UICollectionViewCell) in
            guard let cell = cell as? NibCell else { return }
            
            if let example = item as? ListExamples.FetchExamples.ViewModel.DisplayedExample {
                cell.text = example.name
            }
        }
        
        let sizeBlock = { (item: Any, context: ListCollectionContext?) -> CGSize in
            guard let context = context else { return CGSize() }
            return CGSize(width: context.containerSize.width, height: 44)
        }
        
        let sectionController = ListSingleSectionController(nibName: NibCell.nibName,
                                                            bundle: nil,
                                                            configureBlock: configureBlock,
                                                            sizeBlock: sizeBlock)
        sectionController.selectionDelegate = self
        
        return sectionController
    }
    
    func emptyView(for listAdapter: ListAdapter) -> UIView? { return nil }
    
    func didSelect(_ sectionController: ListSingleSectionController, with object: Any) {
        let section = adapter.section(for: sectionController)
        switch section {
        case 0:
            if let router = router {
                router.routeToShowPosts()
            }
        case 1:
            if let router = router {
                router.routeToTumblr()
            }
        default:
            break
        }
    }

}

